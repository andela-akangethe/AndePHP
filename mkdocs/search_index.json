{
    "docs": [
        {
            "location": "/", 
            "text": "PHP Curriculum\n\n\nIntroduction\n\n\nPHP is a really awesome language to learn either as a beginner or as an expert. When I initially began learning PHP, I felt lost and did not know where to begin. I hope this documentation will make your life profoundly easier and you will have fun as you enjoy the glory that is PHP.\n\n\nAt the end of this documentation you will be a ninja with the great power. Remember with great power comes great responsibility. Enjoy :-)\n\n\nBasic PHP Syntax\n\n\nBelow is just an appetiser so that you know the basics.\n\n\nOk let's begin with the absolute basic piece of information. The default file extension for PHP files is \".php\".\n\n\nA PHP script can be placed anywhere in the .php file. Below is an example\n\n\n?php\n\n   /**\n    * PHP code goes here\n    */\n\n  echo \"This stuff doesn't seem soooo difficult, right?\";\n\n\n\nEcho\n\n\n\n\n\"So how do you output to a browser?\"\n\n\n\n\nTo display anything on the browser.\n\n\n  echo \"This is cool\";\n  echo 'Huh! So you can also use a single quotation mark. Intersting.';\n  echo (\"This is also cool\");\n\n\n\n\n\n\"Awesome. Quick question whats the difference between having \"\" in echo vs '' ?\"\n\n\n\n\nThe main differnce between using \"\" and '' when dealing with echo is fairly simple.\n\n\n$age = 10;\n\necho \"I have always taken desert after supper since I was $age years old.\"\n\n// The output will be:- I have always taken desert after supper since I was 10 years old.\n\nTo achieve the same results using '' one would have to do the following\n\necho 'I have always taken desert after supper since I was' . $age . 'years old.'\n\nThis is called concatenating. This basically means add to the sentence $age.\n\n// This is still ok\n\necho \"I have always taken desert after supper since I was\" . $age . \"years old.\"\n\n\n\nComments in PHP\n\n\n\n\n\"How can I leave myself or future coders information about what a specific piece of code is supposed to do?\"\n\n\n\n\nTo achieve this you comment about that piece of code. An example is shown above. Another example can be found below. There are many ways of commenting.\n\n\n?php\n\n  // This is a single-line comment\n\n  # This is also a single-line comment\n\n  /* *\n   * This is a multiple-lines comment block\n   * that spans over multiple\n   * lines\n  */\n\n\n\nVariables\n\n\nThey are used to store information. To proper understand what variables are think of them as boxes in which the information is placed inside of them.\n\n\n\n\nWhen the stored information is needed back it can be retrieved.\n\n\n\n\n\n\n\"Cool, so what do I need to know about variables?\"\n\n\n\n\nHere are the most important things to know about variables in PHP.\n\n\n\n\n\n\nThey are denoted by a dollar sign ($)\n\n\n$variable = 3;\n\n\n\n\n\n\n\nVariables can be declared before they are assigned some information\n\n\n\n\n\n\nVariables are assigned values using the equal (=) sign as shown above\n\n\n\n\n\n\nThe value of the most recent variable overides that of the previous\n\n\n$variable = 3;\n$variable = 5;\n\necho $variable; // You will see 5\n\n\n\n\n\n\n\nSuppose the variable name consists of two or more words eg school books, in PHP best practice dictates that we write such a variable as follows :-\n\n\n$school_books = ['Math Book', 'Science Book'];\n\n\n\nAs you can see above we separate the two words making the variable name with an underscore\n\n\n\n\n\n\n\n\n\"Huh! are there different types of variables?\"\n\n\n\n\nAs a matter of fact, yes. PHP supports the following data types.\n\n\n\n\n\n\nIntegers \u2212 These whole numbers, without a decimal point, eg. 4195. They can be either positive or negative. Integers can be specified in three formats: decimal (10-based), hexadecimal (16-based - prefixed with 0x) or octal (8-based - prefixed with 0)\n\n\n\n\n\n\nDoubles \u2212 These are decimal point numbers eg. 3.14159 or 49.0\n\n\n\n\n\n\nBooleans \u2212 Can either be true or false\n\n\n\n\n\n\nNULL \u2212 This is a very special type that only has one value ie. NULL\n\n\n\n\n\n\nStrings \u2212 These are sequences of characters, take for instance 'The value of pie is 3.142'\n\n\n\n\n\n\nArrays \u2212 These are named and indexed collections of other values\n\n\n\n\n\n\nObjects \u2212 These data type stores data and information on how to process that data. They must be explicitly declared.\n\n\n\n\n\n\nResources \u2212 These are special variables that hold references to resources external to PHP (such as database connections).\n\n\n\n\n\n\n\n\n\"Well Jeez! Some of these data types sound complex. How will I get to understand them?\"\n\n\n\n\nWe will go though each and every one of these data types, breaking down doors until you have mastered each.\n\n\n\n\nArrays\n\n\n\n\n\"So, what is an array?\"\n\n\n\n\nTo best understand what arrays are and how to use them let's look at a simple example.\n\n\n \n?php\n\n// Suppose you want to store the days of the week this could be represented as\n\n$day1 = 'Monday';\n$day2 = 'Tuesday';\n$day3 = 'Wednesday';\n$day4 = 'Thursday';\n$day5 = 'Friday';\n$day6 = 'Saturday';\n$day7 = 'Sunday';\n\n// This is could work, but there is a more efficient way\n\n$days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\n// $days is an array variable.\n\n\n\nAs you can see above declaring the days of the week as an array is more efficient.\n\n\n\n\n\"Huh! Now that I understand what an array is, how can I access the elements of the array?\"\n\n\n\n\nTo best understand how to access the array elements, let's continue with the above\n\n\n?php\n\n// Suppose you want to store the days of the week this could be represented as\n\n$day1 = 'Monday';\n$day2 = 'Tuesday';\n$day3 = 'Wednesday';\n$day4 = 'Thursday';\n$day5 = 'Friday';\n$day6 = 'Saturday';\n$day7 = 'Sunday';\n\n// This is could work, but there is a more efficient way\n\n// $days is an array variable.\n\n$days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\n// To display the array elements you can either use print_r() or var_dump()\n\nvar_dump($days);\n\n/**\n * The output for var_dump will be\n *    array(7) {\n *        [0]=\n\n *        string(6) \"Monday\"\n *        [1]=\n\n *        string(7) \"Tuesday\"\n *        [2]=\n\n *        string(9) \"Wednesday\"\n *        [3]=\n\n *        string(8) \"Thursday\"\n *        [4]=\n\n *        string(6) \"Friday\"\n *        [5]=\n\n *        string(8) \"Saturday\"\n *         [6]=\n\n *        string(6) \"Sunday\"\n *    }\n */\n\n  print_r($days)\n  /**\n   * The output will be\n   * Array\n   * (\n   *     [0] =\n Monday\n   *     [1] =\n Tuesday\n   *     [2] =\n Wednesday\n   *     [3] =\n Thursday\n   *     [4] =\n Friday\n   *     [5] =\n Saturday\n   *     [6] =\n Sunday\n   * )\n   */\n\n  /**\n   * As you can see above the dates are indexed starting from zero ie Monday is\n   * indexed 0 and Sunday is indexed 6\n   */\n\n  // To dispay Wednesday\n\n  echo $days[2]; // Outputs Wednesday\n\n\n\nLet's dissect the result obtainined above when we do \nprint_r($days)\n\n[0], [1], [2] etc seen above are called the keys while Monday, Tuesday etc are called the values\n\n\n\n\n\"What if I don't want to have those horibble keys and want to customize my keys can I be able to do so?\"\n\n\n\n\nAs a matter of fact, yes. We call that type of array an associative array.\n\n\nImagine you have a list of employees and you want to keep track of how old they are\n\n\n  \n?php \n  $employee = [\n    \"Samuel\" =\n \"35 years\",\n    \"Bonny\"  =\n \"25 years\",\n    \"Clyde\"  =\n \"20 years\",\n  ];\n\n  echo $employee[\"Clyde\"]; // Outputs 20 years\n\n\n\n\n\n\"Awesome. Now that I get what arrays are and how to use get information from them can I do anything else with them say, add and remove items in the array?\"\n\n\n\n\nYes. Below is an example of how to add an element into an array.\n\n\n  \n?php\n\n  // Let's use the days of the week example\n  $days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n  /**\n   * To add Sunday we use array_push() which accepts two values ie the name of \n   * the array and the value you intend to add\n   */\n\n  array_push($days, \"Sunday\");\n\n\n  // Alternatively to add Sunday we can also use\n\n  $days[] = \"Sunday\";\n\n  // To see if Sunday has been added\n\n  print_r($days);\n\n  /**\n   * The output is\n   * Array\n   * (\n   *   [0] =\n Monday\n   *   [1] =\n Tuesday\n   *   [2] =\n Wednesday\n   *   [3] =\n Thursday\n   *   [4] =\n Friday\n   *   [5] =\n Saturday\n   *   [6] =\n Sunday\n   * )\n   *\n   */\n\n\n\nNow to remove the last item that we have added in the days of the week ie Sunday we use array_pop\n\n\n  \n?php\n\n  // Let's use the days of the week example\n  $days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\n  array_pop($days);\n\n  print_r($days);\n\n  /**\n   * The output is\n   * Array\n   * (\n   *   [0] =\n Monday\n   *   [1] =\n Tuesday\n   *   [2] =\n Wednesday\n   *   [3] =\n Thursday\n   *   [4] =\n Friday\n   *   [5] =\n Saturday\n   * )\n   *\n   */\n\n\n\n\n\nOk, some of you might be like \"But Sunday is the first day of the week not Monday how can I reflect that?\"\n\n\n\n\nThat's easy\n\n\n  \n?php\n\n  // Let's declaire the days of the week\n\n  $days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n  array_unshift($days, \"Sunday\");\n\n  print_r($days);\n\n  /**\n   *  Array\n   * (\n   *    [0] =\n Sunday\n   *    [1] =\n Monday\n   *    [2] =\n Tuesday\n   *    [3] =\n Wednesday\n   *    [4] =\n Thursday\n   *    [5] =\n Friday\n   *    [6] =\n Saturday\n   * )\n   *\n   */\n\n\n\nDepending on your needs there are so many array functions that you may want to use.For a comprehensive list of said functions go to \nphp.net\n\n\nConditions\n\n\nWe as humans make decisions every day. Do I wake up or sleep in? Do I buy this or that etc. Computers also have that ability. PHP uses if, elseif and switch statements to make to fulfil this task.\n\n\n\n\nIf statements\n\n\n  \n?php\n\n  $day = \"Friday\";\n\n  if($day == \"Friday\") {\n    echo \"Yipee tomorrow I sleep in.\";\n  } else {\n    echo \"Noooooo tomorrow I have to wake up early\";\n  }\n\n  // Output will be Yipee tomorrow I sleep in.\n\n\n\n\n\n\"What! why are we using two == signs?\"\n\n\n\n\nGreat observation. We use one = sign to assign values to a variable and  == or === signs in if statements.\n\n\n\n\n\"So what it the diferrence between == and === sign?\"\n\n\n\n\nTo best explain this let's look at an example\n\n\n?php\n\n  $day = \"Friday\";\n\n  if($day == true) {\n    echo \"Yipee tomorrow I sleep in.\";\n  } else {\n    echo \"Noooooo tomorrow I have to wake up early\";\n  }\n\n  // Output will be Yipee tomorrow I sleep in.\n\n\n  \n?php\n\n  $day = \"Friday\";\n\n  if($day === \"Friday\") {\n    echo \"Yipee tomorrow I sleep in.\";\n  } else {\n    echo \"Noooooo tomorrow I have to wake up early\";\n  }\n\n  // Output will be Yipee tomorrow I sleep in.\n\n\n\n\n\n\"Say whaaaat?\"\n\n\n\n\nOk, so this may be a little bit confusing but trust me its not. In the first case the == sign does not check the datatype it check if its a truthy value. Since \n$day\nis not equal to an empty string, it does have values then it's a truthy value.\n\n\nThree equal signs ie === is used when you want to be as explicit as possible.\n\n\nElseif\n\n\nAs you have seen above you use if statement when you have to make a deceision between two things but what if you have not one ,not two but many decisions to make, then you use elseif for that\n\n\n   \n?php\n     $day = \"Friday\";\n\n     if ($day === \"Friday\") {\n        echo \"Have a nice weekend!\";\n     } elseif ($d === \"Sun\") {\n        echo \"Have a nice Sunday!\"; \n     } else {\n        echo \"Have a nice day!\"; \n     }\n\n    // Output is Have a nice weekend!\n\n\n\nPlease note that you can change the === with \n= , \n= , \n or \n\n\n  $value1 \n= $value2 means $value1 is less or equal to $value2\n  $value1 \n $value2 means $value1 is less than $value2\n  $value1 \n= $value2 means $value1 is greater or equal to $value2\n  $value1 \n $value2 means $value1 is greater than $value2\n\n\n\nFor a comprehensive list of operators go to \nphp.net\n\n\nElseif\n\n\nTo best expain these let's look at some code\n\n\n    \n?php\n\n    $day = \"Sunday\";\n\n    switch($day) {\n      case \"Monday\":\n        echo \"It's Monday\";\n        break;\n      case \"Tuesday\":\n        echo \"It's Tuesday\";\n        break;\n      case \"Wednesday\":\n        echo \"It's Wednesday\";\n        break;\n      case \"Thursday\":\n        echo \"It's Thursday\";\n        break;\n      case \"Friday\":\n        echo \"It's Friday\";\n        break;\n      default:\n        echo \"Hurray it's the weekend!\";\n    }\n\n    // Outputs hurray it's the weekend\n\n\n\nLookups\n\n\n  $day = \"Monday\";\n\n  $days = [\n    \"Monday\"     =\n \"It's Monday\",\n    \"Tuesday\"    =\n \"It's Tuesday\",\n    \"Wednesday\"  =\n \"It's Wednesday\"\n  ];\n\n  echo $days[$day];\n\n  // Output will be It's Monday\n\n\n\nLookups look cool huh!\n\n\nBe very careful imagine we assign \n$day\n nonsense values\n\n\n  $day = \"weeeeeeeeeeeeeeeeeeeeeeee\";\n\n  $days = [\n    \"Monday\"     =\n \"It's Monday\",\n    \"Tuesday\"    =\n \"It's Tuesday\",\n    \"Wednesday\"  =\n \"It's Wednesday\"\n  ];\n\n  echo $days[$day];\n\n  // Output will be Undefined index: weeeeeeeeeeeeeeeeeeeeeeee\n\n\n\nThis is because we do not weeeeeeeeeeeeeeeeeeeeeeee index in \n$days\n\n\n\n\n\"So how may I solve this?\"\n\n\n\n\nTo solve this problem lets use a ternary orepration\n\n\n  $day = \"weeeeeeeeeeeeeeeeeeeeeeee\";\n\n  $days = [\n    \"Monday\"     =\n \"It's Monday\",\n    \"Tuesday\"    =\n \"It's Tuesday\",\n    \"Wednesday\"  =\n \"It's Wednesday\"\n  ];\n\n  echo isset($days[$day]) ? $days[$day] : \"Not a day.\";\n\n  // Output will be Not a day\n\n\n\n\n\n\"Whoa what was that?????\"\n\n\n\n\nisset($days[$day]) ? $days[$day] : \"Not a day.\"\n Basically is a shortform of if statement. It means, if isset($days[$day]) you have the day show $days[$day] else \"Not a day.\"\n\n\nLoops\n\n\nLoops let you execute a block of code number of times.\n\n\nWhile loop\n\n\n  \n?php\n\n  $i = 1;\n\n  while ($i \n 6) {\n\n    echo \"Number $i \nbr /\n\";\n    $i++;\n\n  }\n\n  /**\n   * Outputs\n   * Number 1\n   * Number 2\n   * Number 3\n   * Number 4\n   * Number 5\n   */\n\n\n\nFor loop\n\n\n  \n?php \n  for ($x = 0; $x \n= 2; $x++) {\n      echo \"The number is: $x \nbr\n\";\n  }\n\n  /**\n   * Outputs\n   * The number 0\n   * The number 1\n   * The number 2\n   */\n\n\n\nForeach loop\n\n\n  \n?php\n  $stages = array(50, 110, 130);\n  $i = 0;\n\n  foreach ($stages as $value) {\n\n    echo \"Stage $i Score: $value \nbr /\n\";\n    $i++;\n\n  }\n\n  /**\n   * Outputs\n   * Stage 0 Score: 50\n   * Stage 1 Score: 110\n   * Stage 2 Score: 130\n   */", 
            "title": "Home"
        }, 
        {
            "location": "/#php-curriculum", 
            "text": "", 
            "title": "PHP Curriculum"
        }, 
        {
            "location": "/#introduction", 
            "text": "PHP is a really awesome language to learn either as a beginner or as an expert. When I initially began learning PHP, I felt lost and did not know where to begin. I hope this documentation will make your life profoundly easier and you will have fun as you enjoy the glory that is PHP.  At the end of this documentation you will be a ninja with the great power. Remember with great power comes great responsibility. Enjoy :-)", 
            "title": "Introduction"
        }, 
        {
            "location": "/#basic-php-syntax", 
            "text": "Below is just an appetiser so that you know the basics.  Ok let's begin with the absolute basic piece of information. The default file extension for PHP files is \".php\".  A PHP script can be placed anywhere in the .php file. Below is an example  ?php\n\n   /**\n    * PHP code goes here\n    */\n\n  echo \"This stuff doesn't seem soooo difficult, right?\";  Echo   \"So how do you output to a browser?\"   To display anything on the browser.    echo \"This is cool\";\n  echo 'Huh! So you can also use a single quotation mark. Intersting.';\n  echo (\"This is also cool\");   \"Awesome. Quick question whats the difference between having \"\" in echo vs '' ?\"   The main differnce between using \"\" and '' when dealing with echo is fairly simple.  $age = 10;\n\necho \"I have always taken desert after supper since I was $age years old.\"\n\n// The output will be:- I have always taken desert after supper since I was 10 years old.\n\nTo achieve the same results using '' one would have to do the following\n\necho 'I have always taken desert after supper since I was' . $age . 'years old.'\n\nThis is called concatenating. This basically means add to the sentence $age.\n\n// This is still ok\n\necho \"I have always taken desert after supper since I was\" . $age . \"years old.\"  Comments in PHP   \"How can I leave myself or future coders information about what a specific piece of code is supposed to do?\"   To achieve this you comment about that piece of code. An example is shown above. Another example can be found below. There are many ways of commenting.  ?php\n\n  // This is a single-line comment\n\n  # This is also a single-line comment\n\n  /* *\n   * This is a multiple-lines comment block\n   * that spans over multiple\n   * lines\n  */  Variables  They are used to store information. To proper understand what variables are think of them as boxes in which the information is placed inside of them.   When the stored information is needed back it can be retrieved.    \"Cool, so what do I need to know about variables?\"   Here are the most important things to know about variables in PHP.    They are denoted by a dollar sign ($)  $variable = 3;    Variables can be declared before they are assigned some information    Variables are assigned values using the equal (=) sign as shown above    The value of the most recent variable overides that of the previous  $variable = 3;\n$variable = 5;\n\necho $variable; // You will see 5    Suppose the variable name consists of two or more words eg school books, in PHP best practice dictates that we write such a variable as follows :-  $school_books = ['Math Book', 'Science Book'];  As you can see above we separate the two words making the variable name with an underscore     \"Huh! are there different types of variables?\"   As a matter of fact, yes. PHP supports the following data types.    Integers \u2212 These whole numbers, without a decimal point, eg. 4195. They can be either positive or negative. Integers can be specified in three formats: decimal (10-based), hexadecimal (16-based - prefixed with 0x) or octal (8-based - prefixed with 0)    Doubles \u2212 These are decimal point numbers eg. 3.14159 or 49.0    Booleans \u2212 Can either be true or false    NULL \u2212 This is a very special type that only has one value ie. NULL    Strings \u2212 These are sequences of characters, take for instance 'The value of pie is 3.142'    Arrays \u2212 These are named and indexed collections of other values    Objects \u2212 These data type stores data and information on how to process that data. They must be explicitly declared.    Resources \u2212 These are special variables that hold references to resources external to PHP (such as database connections).     \"Well Jeez! Some of these data types sound complex. How will I get to understand them?\"   We will go though each and every one of these data types, breaking down doors until you have mastered each.   Arrays   \"So, what is an array?\"   To best understand what arrays are and how to use them let's look at a simple example.    ?php\n\n// Suppose you want to store the days of the week this could be represented as\n\n$day1 = 'Monday';\n$day2 = 'Tuesday';\n$day3 = 'Wednesday';\n$day4 = 'Thursday';\n$day5 = 'Friday';\n$day6 = 'Saturday';\n$day7 = 'Sunday';\n\n// This is could work, but there is a more efficient way\n\n$days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\n// $days is an array variable.  As you can see above declaring the days of the week as an array is more efficient.   \"Huh! Now that I understand what an array is, how can I access the elements of the array?\"   To best understand how to access the array elements, let's continue with the above  ?php\n\n// Suppose you want to store the days of the week this could be represented as\n\n$day1 = 'Monday';\n$day2 = 'Tuesday';\n$day3 = 'Wednesday';\n$day4 = 'Thursday';\n$day5 = 'Friday';\n$day6 = 'Saturday';\n$day7 = 'Sunday';\n\n// This is could work, but there is a more efficient way\n\n// $days is an array variable.\n\n$days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\n// To display the array elements you can either use print_r() or var_dump()\n\nvar_dump($days);\n\n/**\n * The output for var_dump will be\n *    array(7) {\n *        [0]= \n *        string(6) \"Monday\"\n *        [1]= \n *        string(7) \"Tuesday\"\n *        [2]= \n *        string(9) \"Wednesday\"\n *        [3]= \n *        string(8) \"Thursday\"\n *        [4]= \n *        string(6) \"Friday\"\n *        [5]= \n *        string(8) \"Saturday\"\n *         [6]= \n *        string(6) \"Sunday\"\n *    }\n */\n\n  print_r($days)\n  /**\n   * The output will be\n   * Array\n   * (\n   *     [0] =  Monday\n   *     [1] =  Tuesday\n   *     [2] =  Wednesday\n   *     [3] =  Thursday\n   *     [4] =  Friday\n   *     [5] =  Saturday\n   *     [6] =  Sunday\n   * )\n   */\n\n  /**\n   * As you can see above the dates are indexed starting from zero ie Monday is\n   * indexed 0 and Sunday is indexed 6\n   */\n\n  // To dispay Wednesday\n\n  echo $days[2]; // Outputs Wednesday  Let's dissect the result obtainined above when we do  print_r($days) \n[0], [1], [2] etc seen above are called the keys while Monday, Tuesday etc are called the values   \"What if I don't want to have those horibble keys and want to customize my keys can I be able to do so?\"   As a matter of fact, yes. We call that type of array an associative array.  Imagine you have a list of employees and you want to keep track of how old they are     ?php \n  $employee = [\n    \"Samuel\" =  \"35 years\",\n    \"Bonny\"  =  \"25 years\",\n    \"Clyde\"  =  \"20 years\",\n  ];\n\n  echo $employee[\"Clyde\"]; // Outputs 20 years   \"Awesome. Now that I get what arrays are and how to use get information from them can I do anything else with them say, add and remove items in the array?\"   Yes. Below is an example of how to add an element into an array.     ?php\n\n  // Let's use the days of the week example\n  $days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n  /**\n   * To add Sunday we use array_push() which accepts two values ie the name of \n   * the array and the value you intend to add\n   */\n\n  array_push($days, \"Sunday\");\n\n\n  // Alternatively to add Sunday we can also use\n\n  $days[] = \"Sunday\";\n\n  // To see if Sunday has been added\n\n  print_r($days);\n\n  /**\n   * The output is\n   * Array\n   * (\n   *   [0] =  Monday\n   *   [1] =  Tuesday\n   *   [2] =  Wednesday\n   *   [3] =  Thursday\n   *   [4] =  Friday\n   *   [5] =  Saturday\n   *   [6] =  Sunday\n   * )\n   *\n   */  Now to remove the last item that we have added in the days of the week ie Sunday we use array_pop     ?php\n\n  // Let's use the days of the week example\n  $days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\n  array_pop($days);\n\n  print_r($days);\n\n  /**\n   * The output is\n   * Array\n   * (\n   *   [0] =  Monday\n   *   [1] =  Tuesday\n   *   [2] =  Wednesday\n   *   [3] =  Thursday\n   *   [4] =  Friday\n   *   [5] =  Saturday\n   * )\n   *\n   */   Ok, some of you might be like \"But Sunday is the first day of the week not Monday how can I reflect that?\"   That's easy     ?php\n\n  // Let's declaire the days of the week\n\n  $days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n  array_unshift($days, \"Sunday\");\n\n  print_r($days);\n\n  /**\n   *  Array\n   * (\n   *    [0] =  Sunday\n   *    [1] =  Monday\n   *    [2] =  Tuesday\n   *    [3] =  Wednesday\n   *    [4] =  Thursday\n   *    [5] =  Friday\n   *    [6] =  Saturday\n   * )\n   *\n   */  Depending on your needs there are so many array functions that you may want to use.For a comprehensive list of said functions go to  php.net  Conditions  We as humans make decisions every day. Do I wake up or sleep in? Do I buy this or that etc. Computers also have that ability. PHP uses if, elseif and switch statements to make to fulfil this task.   If statements     ?php\n\n  $day = \"Friday\";\n\n  if($day == \"Friday\") {\n    echo \"Yipee tomorrow I sleep in.\";\n  } else {\n    echo \"Noooooo tomorrow I have to wake up early\";\n  }\n\n  // Output will be Yipee tomorrow I sleep in.   \"What! why are we using two == signs?\"   Great observation. We use one = sign to assign values to a variable and  == or === signs in if statements.   \"So what it the diferrence between == and === sign?\"   To best explain this let's look at an example  ?php\n\n  $day = \"Friday\";\n\n  if($day == true) {\n    echo \"Yipee tomorrow I sleep in.\";\n  } else {\n    echo \"Noooooo tomorrow I have to wake up early\";\n  }\n\n  // Output will be Yipee tomorrow I sleep in.\n\n\n   ?php\n\n  $day = \"Friday\";\n\n  if($day === \"Friday\") {\n    echo \"Yipee tomorrow I sleep in.\";\n  } else {\n    echo \"Noooooo tomorrow I have to wake up early\";\n  }\n\n  // Output will be Yipee tomorrow I sleep in.   \"Say whaaaat?\"   Ok, so this may be a little bit confusing but trust me its not. In the first case the == sign does not check the datatype it check if its a truthy value. Since  $day is not equal to an empty string, it does have values then it's a truthy value.  Three equal signs ie === is used when you want to be as explicit as possible.  Elseif  As you have seen above you use if statement when you have to make a deceision between two things but what if you have not one ,not two but many decisions to make, then you use elseif for that      ?php\n     $day = \"Friday\";\n\n     if ($day === \"Friday\") {\n        echo \"Have a nice weekend!\";\n     } elseif ($d === \"Sun\") {\n        echo \"Have a nice Sunday!\"; \n     } else {\n        echo \"Have a nice day!\"; \n     }\n\n    // Output is Have a nice weekend!  Please note that you can change the === with  = ,  = ,   or     $value1  = $value2 means $value1 is less or equal to $value2\n  $value1   $value2 means $value1 is less than $value2\n  $value1  = $value2 means $value1 is greater or equal to $value2\n  $value1   $value2 means $value1 is greater than $value2  For a comprehensive list of operators go to  php.net  Elseif  To best expain these let's look at some code       ?php\n\n    $day = \"Sunday\";\n\n    switch($day) {\n      case \"Monday\":\n        echo \"It's Monday\";\n        break;\n      case \"Tuesday\":\n        echo \"It's Tuesday\";\n        break;\n      case \"Wednesday\":\n        echo \"It's Wednesday\";\n        break;\n      case \"Thursday\":\n        echo \"It's Thursday\";\n        break;\n      case \"Friday\":\n        echo \"It's Friday\";\n        break;\n      default:\n        echo \"Hurray it's the weekend!\";\n    }\n\n    // Outputs hurray it's the weekend  Lookups    $day = \"Monday\";\n\n  $days = [\n    \"Monday\"     =  \"It's Monday\",\n    \"Tuesday\"    =  \"It's Tuesday\",\n    \"Wednesday\"  =  \"It's Wednesday\"\n  ];\n\n  echo $days[$day];\n\n  // Output will be It's Monday  Lookups look cool huh!  Be very careful imagine we assign  $day  nonsense values    $day = \"weeeeeeeeeeeeeeeeeeeeeeee\";\n\n  $days = [\n    \"Monday\"     =  \"It's Monday\",\n    \"Tuesday\"    =  \"It's Tuesday\",\n    \"Wednesday\"  =  \"It's Wednesday\"\n  ];\n\n  echo $days[$day];\n\n  // Output will be Undefined index: weeeeeeeeeeeeeeeeeeeeeeee  This is because we do not weeeeeeeeeeeeeeeeeeeeeeee index in  $days   \"So how may I solve this?\"   To solve this problem lets use a ternary orepration    $day = \"weeeeeeeeeeeeeeeeeeeeeeee\";\n\n  $days = [\n    \"Monday\"     =  \"It's Monday\",\n    \"Tuesday\"    =  \"It's Tuesday\",\n    \"Wednesday\"  =  \"It's Wednesday\"\n  ];\n\n  echo isset($days[$day]) ? $days[$day] : \"Not a day.\";\n\n  // Output will be Not a day   \"Whoa what was that?????\"   isset($days[$day]) ? $days[$day] : \"Not a day.\"  Basically is a shortform of if statement. It means, if isset($days[$day]) you have the day show $days[$day] else \"Not a day.\"  Loops  Loops let you execute a block of code number of times.  While loop     ?php\n\n  $i = 1;\n\n  while ($i   6) {\n\n    echo \"Number $i  br / \";\n    $i++;\n\n  }\n\n  /**\n   * Outputs\n   * Number 1\n   * Number 2\n   * Number 3\n   * Number 4\n   * Number 5\n   */  For loop     ?php \n  for ($x = 0; $x  = 2; $x++) {\n      echo \"The number is: $x  br \";\n  }\n\n  /**\n   * Outputs\n   * The number 0\n   * The number 1\n   * The number 2\n   */  Foreach loop     ?php\n  $stages = array(50, 110, 130);\n  $i = 0;\n\n  foreach ($stages as $value) {\n\n    echo \"Stage $i Score: $value  br / \";\n    $i++;\n\n  }\n\n  /**\n   * Outputs\n   * Stage 0 Score: 50\n   * Stage 1 Score: 110\n   * Stage 2 Score: 130\n   */", 
            "title": "Basic PHP Syntax"
        }, 
        {
            "location": "/setup/php-setup/", 
            "text": "Installing PHP\n\n\nOne of php's main selling point is how easy it is for a beginner to set up the environment.There are plenty of dedicated apps that make one's life very easy.\n\n\nBelow are just but a few of those dedicated apps on different operating systems.\n\n\nMac\n\n\nPHP comes pre-installed on Mac OS. However, it can be a pain configuring so that all the parts needed ie. php, mysql and apache work harmoniously.\n\n\nFor this reason, we shall be taking the cowards way out ;-) and installing \nMAMP\n. Below are screenshots for the entire installation process.\n\n\n\n\n\n\nGo to the \nMAMP\n website\n   \n\n\n\n\n\n\nDownload the MAMP free version\n\n\n\n\n\n\nClick on the MAMP .pkg to install.\n\n\n\n\n\n\nWindows\n\n\n\n\nGo to the \nXAMPP\n website\n    \n\n\n\n\nDownload linux XAMPP. During the making of this documentation the XAMMP version was 5.6.8-0.\n\n\n\n\n\n\nClick on the installer to install.\n\n\n\n\n\n\nLinux\n\n\nPHP comes pre-installed on any Linux OS. However, it can be a pain configuring so that all the parts needed ie. php, mysql and apache work harmoniously.\n\n\nFor this reason, we shall be taking the easy way out and installing \nXAMPP\n. Below are screenshots for the entire installation process.\n\n\n\n\n\n\nGo to the \nXAMPP\n website\n  \n\n\n\n\n\n\nDownload linux XAMPP. During the making of this documentation the XAMMP version was 5.6.8-0.\n\n\n\n\n\n\nGo to the directory where the XAMPP download exists\n\n\n\n\n\n\nMake the XAMPP package executable as shown below. Please remember to use the correct download name, for my case it is xampp-linux-x64-5.6.8-0-installer.run.\n\n\nsudo chmod +x xampp-linux-x64-5.6.8-0-installer.run\n\n\n\n\n\n\n\nNow, install XAMPP stack as shown below\n\n\nsudo ./xampp-linux-x64-5.6.8-0-installer.run\n\n\n\n\n\n\n\nYou\u2019ll be asked to answer a couple questions. Go with the defaults. Press Y to accept the defaults.\n\n\n\n\n\n\nTo start XAMPP use the command below\n\n\nsudo /opt/lampp/lampp start\n\n\n\n\n\n\n\nThe sample output will be\n\n\nStarting XAMPP for Linux 5.6.8-0...\nXAMPP: Starting Apache...already running.\nXAMPP: Starting MySQL...ok.\nXAMPP: Starting ProFTPD...ok.\n\n\n\n\n\n\n\nNow test Xampp in your browser [Firefox/Chrome]\n\n\nhttp://localhost\n\n\n\n\n\n\n\nTo Stop XAMPP use\n\n\nsudo /opt/lampp/lampp stop", 
            "title": "PHP Install"
        }, 
        {
            "location": "/setup/php-setup/#installing-php", 
            "text": "One of php's main selling point is how easy it is for a beginner to set up the environment.There are plenty of dedicated apps that make one's life very easy.  Below are just but a few of those dedicated apps on different operating systems.  Mac  PHP comes pre-installed on Mac OS. However, it can be a pain configuring so that all the parts needed ie. php, mysql and apache work harmoniously.  For this reason, we shall be taking the cowards way out ;-) and installing  MAMP . Below are screenshots for the entire installation process.    Go to the  MAMP  website\n       Download the MAMP free version    Click on the MAMP .pkg to install.    Windows   Go to the  XAMPP  website\n       Download linux XAMPP. During the making of this documentation the XAMMP version was 5.6.8-0.    Click on the installer to install.    Linux  PHP comes pre-installed on any Linux OS. However, it can be a pain configuring so that all the parts needed ie. php, mysql and apache work harmoniously.  For this reason, we shall be taking the easy way out and installing  XAMPP . Below are screenshots for the entire installation process.    Go to the  XAMPP  website\n      Download linux XAMPP. During the making of this documentation the XAMMP version was 5.6.8-0.    Go to the directory where the XAMPP download exists    Make the XAMPP package executable as shown below. Please remember to use the correct download name, for my case it is xampp-linux-x64-5.6.8-0-installer.run.  sudo chmod +x xampp-linux-x64-5.6.8-0-installer.run    Now, install XAMPP stack as shown below  sudo ./xampp-linux-x64-5.6.8-0-installer.run    You\u2019ll be asked to answer a couple questions. Go with the defaults. Press Y to accept the defaults.    To start XAMPP use the command below  sudo /opt/lampp/lampp start    The sample output will be  Starting XAMPP for Linux 5.6.8-0...\nXAMPP: Starting Apache...already running.\nXAMPP: Starting MySQL...ok.\nXAMPP: Starting ProFTPD...ok.    Now test Xampp in your browser [Firefox/Chrome]  http://localhost    To Stop XAMPP use  sudo /opt/lampp/lampp stop", 
            "title": "Installing PHP"
        }, 
        {
            "location": "/setup/laravel-setup/", 
            "text": "", 
            "title": "Laravel Setup"
        }, 
        {
            "location": "/about/andela/", 
            "text": "", 
            "title": "Andela"
        }, 
        {
            "location": "/about/php/", 
            "text": "", 
            "title": "PHP"
        }
    ]
}